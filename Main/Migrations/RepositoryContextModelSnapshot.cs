// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace Main.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Etkinlik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Etkinlikler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 19, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9287),
                            EndDate = new DateTime(2025, 9, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/1.jpg",
                            IsActive = true,
                            LongDescription = "Yazılım sektöründeki en güncel gelişmelerin konuşulacağı, atölye ve panellerin düzenleneceği büyük bir etkinlik.",
                            ShortDescription = "Yazılım dünyasının önde gelen isimleriyle buluşma.",
                            StartDate = new DateTime(2025, 9, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yazılım Zirvesi 2025"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 22, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9310),
                            EndDate = new DateTime(2025, 10, 5, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/2.jpg",
                            IsActive = true,
                            LongDescription = "Katılımcılar, iş fikri geliştirme ve sunum teknikleri üzerine eğitim alacaklar.",
                            ShortDescription = "Girişimcilik üzerine uygulamalı eğitim.",
                            StartDate = new DateTime(2025, 10, 5, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Girişimcilik Atölyesi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 24, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9318),
                            EndDate = new DateTime(2025, 11, 20, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/3.jpg",
                            IsActive = true,
                            LongDescription = "Yenilikçi sanat eserlerinin ve teknolojik ürünlerin sergileneceği bir etkinlik.",
                            ShortDescription = "Teknoloji ile sanatın buluştuğu sergi.",
                            StartDate = new DateTime(2025, 11, 20, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Teknoloji ve Sanat Sergisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 26, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9325),
                            EndDate = new DateTime(2025, 9, 25, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/4.jpg",
                            IsActive = true,
                            LongDescription = "Katılımcılar, firmalarla birebir görüşme ve iş/staj başvurusu yapma imkanı bulacaklar.",
                            ShortDescription = "Farklı sektörlerden firmalarla tanışma fırsatı.",
                            StartDate = new DateTime(2025, 9, 25, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kariyer Günü"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 27, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9333),
                            EndDate = new DateTime(2025, 12, 2, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/5.jpg",
                            IsActive = true,
                            LongDescription = "Katılımcılar, mobil uygulama geliştirme süreçlerini uygulamalı olarak öğrenecekler.",
                            ShortDescription = "Mobil uygulama geliştirme temelleri.",
                            StartDate = new DateTime(2025, 12, 2, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mobil Uygulama Geliştirme Eğitimi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 28, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9341),
                            EndDate = new DateTime(2025, 9, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/6.jpg",
                            IsActive = true,
                            LongDescription = "Uzman konuşmacılarla yapay zeka teknolojilerinin bugünü ve geleceği tartışılacak.",
                            ShortDescription = "Yapay zeka alanındaki güncel gelişmeler.",
                            StartDate = new DateTime(2025, 9, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yapay Zeka Paneli"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 8, 21, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9348),
                            EndDate = new DateTime(2025, 10, 12, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/7.jpg",
                            IsActive = true,
                            LongDescription = "Alanında uzman konuşmacılarla siber güvenlikte güncel tehditler ve alınabilecek önlemler tartışılacak.",
                            ShortDescription = "Siber tehditler ve korunma yolları.",
                            StartDate = new DateTime(2025, 10, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Siber Güvenlik Semineri"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 8, 23, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9356),
                            EndDate = new DateTime(2025, 11, 5, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/8.jpg",
                            IsActive = true,
                            LongDescription = "Katılımcılar, veri bilimi projelerinde kullanılan araçları ve teknikleri uygulamalı olarak öğrenecekler.",
                            ShortDescription = "Veri analizi ve makine öğrenmesi uygulamaları.",
                            StartDate = new DateTime(2025, 11, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Veri Bilimi Çalıştayı"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 8, 25, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9423),
                            EndDate = new DateTime(2025, 12, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/9.jpg",
                            IsActive = true,
                            LongDescription = "Takımlar halinde katılımcılar, 24 saat boyunca kendi oyunlarını geliştirecekler ve jüriye sunacaklar.",
                            ShortDescription = "24 saatlik oyun geliştirme maratonu.",
                            StartDate = new DateTime(2025, 12, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Oyun Geliştirme Hackathonu"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 8, 20, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9431),
                            EndDate = new DateTime(2025, 10, 20, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/10.jpg",
                            IsActive = true,
                            LongDescription = "Görüntü işleme alanında yapay zekanın kullanımı ve örnek projeler anlatılacak.",
                            ShortDescription = "Görüntü işleme ve yapay zeka uygulamaları.",
                            StartDate = new DateTime(2025, 10, 20, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yapay Zeka ile Görüntü İşleme"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 8, 22, 17, 52, 0, 763, DateTimeKind.Local).AddTicks(9439),
                            EndDate = new DateTime(2025, 11, 15, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/11.jpg",
                            IsActive = true,
                            LongDescription = "Blockchain teknolojisinin geleceği ve kripto paraların sektöre etkisi uzmanlar tarafından tartışılacak.",
                            ShortDescription = "Blockchain ve kripto paralar üzerine panel.",
                            StartDate = new DateTime(2025, 11, 15, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Blockchain Teknolojileri Paneli"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
